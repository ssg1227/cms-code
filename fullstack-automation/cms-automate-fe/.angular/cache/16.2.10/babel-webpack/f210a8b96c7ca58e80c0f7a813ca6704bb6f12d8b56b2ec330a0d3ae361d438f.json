{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/list.service\";\nimport * as i3 from \"@angular/common\";\nfunction FolderTreeExpandComponent_div_1_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const level1File_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"disabled\", level1File_r4.indexOf(\"(file)\") >= 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(level1File_r4.replace(\"(file)\", \"\"));\n  }\n}\nfunction FolderTreeExpandComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"label\", 2);\n    i0.ɵɵtext(2, \"Content Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 3);\n    i0.ɵɵlistener(\"change\", function FolderTreeExpandComponent_div_1_Template_select_change_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.getImageFolders($event, ctx_r6.Folder(i_r2)));\n    });\n    i0.ɵɵtemplate(4, FolderTreeExpandComponent_div_1_option_4_Template, 2, 2, \"option\", 4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formControlName\", ctx_r0.getSub(i_r2 + 1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.Folder(i_r2));\n  }\n}\nexport class FolderTreeExpandComponent {\n  Folder(i) {\n    return this.folderLists[i];\n  }\n  constructor(formBuilder, listService) {\n    this.formBuilder = formBuilder;\n    this.listService = listService;\n    this.rootFolder = '';\n    this.depth = 4;\n    this.finalDestination = new EventEmitter();\n    this.destinationFile = \"\";\n    this.folderLists = [[\"\"]];\n    this.folderTreeForm = this.formBuilder.group({\n      folderLines: this.formBuilder.array([]),\n      fileName: [\"\"]\n    });\n  }\n  ngOnInit() {\n    this.formInit();\n  }\n  formInit() {\n    for (let i = 1; i <= this.depth; i++) {\n      this.FolderSelects.push(new FormControl(`sub${i}`));\n      let emptyArr = [`select${i}`];\n      if (i === 1) {\n        this.folderLists[i - 1] = emptyArr;\n        this.getImageFolders(this.rootFolder, this.folderLists[i - 1], 0);\n      } else this.folderLists.push(emptyArr);\n    }\n    //  this.form = \n  }\n\n  get FolderSelects() {\n    return this.folderTreeForm.controls[\"folderLines\"];\n  }\n  getSub(i) {\n    return `sub${i}`;\n  }\n  getImageFolders(parent, folderList = null, i = 0) {\n    if (folderList === null) {\n      return;\n    }\n    this.listService.getFolderContent(parent) // { fileName: \"tedt\",description:\"hefhkf\"})\n    .subscribe(response => {\n      if (response && Array.isArray(response)) {\n        response.forEach(st => folderList.push(st));\n      }\n      /*\n       switch(level) {\n         case 1:  this.level1Files = response ;\n           break ;\n         case 2:  this.level2Files = response ;\n           break ;\n         case 3:  this.level3Files = response ;\n           break ;\n       }\n      */\n    }, err => {\n      console.log(`ERROR ${err}`);\n      ;\n    }, () => {\n      console.log('complete');\n    });\n  }\n  sendFinalDestinationFile() {\n    this.finalDestination.emit(this.destinationFile);\n  }\n  static #_ = this.ɵfac = function FolderTreeExpandComponent_Factory(t) {\n    return new (t || FolderTreeExpandComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ListService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FolderTreeExpandComponent,\n    selectors: [[\"app-folder-tree-expand\"]],\n    inputs: {\n      rootFolder: \"rootFolder\",\n      depth: \"depth\"\n    },\n    outputs: {\n      finalDestination: \"finalDestination\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [4, \"ngFor\", \"ngForOf\"], [\"for\", \"imageTab1\"], [\"type\", \"Select\", 3, \"formControlName\", \"change\"], [3, \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\"]],\n    template: function FolderTreeExpandComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵtemplate(1, FolderTreeExpandComponent_div_1_Template, 5, 2, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.folderTreeForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.FolderSelects.controls);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","FormControl","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","level1File_r4","indexOf","ɵɵadvance","ɵɵtextInterpolate","replace","ɵɵlistener","FolderTreeExpandComponent_div_1_Template_select_change_3_listener","$event","restoredCtx","ɵɵrestoreView","_r7","i_r2","index","ctx_r6","ɵɵnextContext","ɵɵresetView","getImageFolders","Folder","ɵɵtemplate","FolderTreeExpandComponent_div_1_option_4_Template","ctx_r0","getSub","FolderTreeExpandComponent","i","folderLists","constructor","formBuilder","listService","rootFolder","depth","finalDestination","destinationFile","folderTreeForm","group","folderLines","array","fileName","ngOnInit","formInit","FolderSelects","push","emptyArr","controls","parent","folderList","getFolderContent","subscribe","response","Array","isArray","forEach","st","err","console","log","sendFinalDestinationFile","emit","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ListService","_2","selectors","inputs","outputs","decls","vars","consts","template","FolderTreeExpandComponent_Template","rf","ctx","FolderTreeExpandComponent_div_1_Template"],"sources":["/Users/shantanu/Documents/GitHub/ssg1227-GuruDatta@9/fullstack-automation/cms-automate-fe/src/app/components/reusables/folder-tree-expand/folder-tree-expand.component.ts","/Users/shantanu/Documents/GitHub/ssg1227-GuruDatta@9/fullstack-automation/cms-automate-fe/src/app/components/reusables/folder-tree-expand/folder-tree-expand.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Input, Output, EventEmitter} from '@angular/core'\nimport { FormArray, FormBuilder,FormControl,FormGroup} from \"@angular/forms\";\nimport { ListService } from  '../../../services/list.service';\n@Component({\n  selector: 'app-folder-tree-expand',\n  templateUrl: './folder-tree-expand.component.html',\n  styleUrls: ['./folder-tree-expand.component.css']\n})\nexport class FolderTreeExpandComponent implements OnInit {\n  @Input() rootFolder = '';\n  @Input() depth = 4 ;\n  @Output() finalDestination = new EventEmitter<string>();\n  \n  destinationFile = \"\";\n  folderLists = [\n    [\"\"],\n  ];\n  Folder(i:number) {\n    return this.folderLists[i]\n  }\n  constructor(private formBuilder: FormBuilder, private listService: ListService) { \n  }\n  public folderTreeForm:FormGroup = this.formBuilder.group({\n    folderLines: this.formBuilder.array([]),\n    fileName: [\"\"]\n  });\n  \n  ngOnInit(): void {\n    this.formInit() ;\n  }\n  formInit() {\n    for (let i = 1 ; i <= this.depth; i++){\n     this.FolderSelects.push(new FormControl(`sub${i}`));\n     let emptyArr = [ `select${i}`];\n     if(i === 1) {\n        this.folderLists[i-1] = emptyArr;\n        this.getImageFolders(this.rootFolder, this.folderLists[i-1],0 )\n     }  else \n       this.folderLists.push(emptyArr);\n    }\n    //  this.form = \n  }\n  get FolderSelects():FormArray  {\n    return this.folderTreeForm.controls[\"folderLines\"] as FormArray;\n  }\n  getSub(i:any) {\n    return `sub${i}`\n  }\n  getImageFolders(parent:any, folderList:any=null, i:number=0)  {\n    if (folderList === null) {\n      return ;\n    }\n    this.listService.getFolderContent(parent)// { fileName: \"tedt\",description:\"hefhkf\"})\n   .subscribe(\n     (response:any)=> { \n       if (response && Array.isArray(response)) {\n         response.forEach(st => folderList.push(st));\n       }\n      /*\n       switch(level) {\n         case 1:  this.level1Files = response ;\n           break ;\n         case 2:  this.level2Files = response ;\n           break ;\n         case 3:  this.level3Files = response ;\n           break ;\n       }\n      */\n     },\n     (err:any)=>{ console.log(`ERROR ${err}`);  ; },\n     () => { console.log('complete') ;   },\n   )\n } \n  \n  sendFinalDestinationFile() {\n    this.finalDestination.emit(this.destinationFile);\n  }\n\n}\n","<form [formGroup]=\"folderTreeForm\">\n   <div *ngFor=\"let folderSelect of FolderSelects.controls; let i=index\" >\n    <label for=\"imageTab1\">Content Type</label>\n    <select type=\"Select\" [formControlName]=\"getSub(i+1)\"  (change)=\"getImageFolders($event,Folder(i))\">\n        <option *ngFor=\"let level1File of Folder(i); let k=index\" [disabled]=\"level1File.indexOf('(file)') >= 0\">{{level1File.replace('(file)','')}}</option>\n    </select>\n   </div>\n \n</form>\n<!-- <label >Set Destination Folders:</label>\n<div>\n<label>Level1</label>\n<select id=\"level1\" type=\"Select\" (change)=\"getImageSubFolder($event,2)\" >\n    <option *ngFor=\"let level1File of level1Files\" [disabled]=\"level1File.indexOf('(file)') >= 0\">{{level1File.replace('(file)','')}}</option>\n</select>\n</div>\n<div> \n<label>Level2</label>\n<select id=\"level2\" type=\"Select\" (change)=\"getImageSubFolder($event,3)\" >\n    <option *ngFor=\"let level2File of level2Files\" [disabled]=\"level2File.indexOf('(file)') >= 0\">{{level2File.replace('(file)','')}}</option>\n</select>\n</div>  \n<div>\n    <label>Level3</label>\n    <select id=\"level3\" type=\"Select\" (change)=\"getImageSubFolder($event,4)\" >\n        <option *ngFor=\"let level3File of level3Files\" [disabled]=\"level3File.indexOf('(file)') >= 0\">{{level3File.replace('(file)','')}}</option>\n    </select>\n</div>\n<div>\n    <label>FileName</label>\n   <input type=\"text\" [(ngModel)]=\"imageFileName\" #ctrl=\"ngModel\">\n</div>  \n-->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}